// plbridge configuration file

// This value determines the granularity of the measuring system
mainloopinterval = 250;		// [ms]

// MQTT broker parameters
mqtt = {
	broker = "127.0.0.1";
	debug = false;			// only works in command line mode
	retain_default = true;			// mqtt retain setting for publish
	noreadonexit = false;	// publish noread value of all tags on exit
	clearonexit = false;		// clear all tags from mosquitto persistance store on exit
};

// MQTT subscription list - PL device write registers
// the topics listed here are written to the slave whenever the broker publishes
// topic: mqtt topic to subscribe
// address: PL device register address to write
// type: tag type, i=input, q=output, r=register (16bit)
// ignoreretained: true= do not write retained published value to modbus
mqtt_tags = (
	{
	topic = "vk2ray/pwr/pl20/q0";
	address = 0;
	datatype = "q";
	},
	{
	topic = "vk2ray/pwr/pl20/q1";
	address = 1;
	datatype = "q";
	},
	{
	topic = "vk2ray/pwr/pl20/q2";
	address = 2;
	datatype = "q";
	}
)

// PLxx interface configuration
// only one interface device is allowed
plxx = {
	device = "/dev/ttyUSB0";		// mandatory
	baudrate = 9600;				// mandatory
// optional parameters:
};

// Updatecycles definition
// every pl tag is read in one of these cycles
// id - a freely defined unique integer which is referenced in the tag definition
// interval - the time between reading, in seconds
updatecycles = (
	{
	id = 1;
	interval = 2;	// seconds
	},
	{
	id = 2;
	interval = 20;
	},
	{
	id = 3;
	interval = 30;
	},
	{
	id = 6;
	interval = 60;
	},
	{
	id = 12;
	interval = 120;		// 2 minutes
	},
	{
	id = 30
	interval = 300;		// 5 minutes
	},
	{
	id = 60;
	interval = 600;		// 10 minutes
	},
	{
	id = 180;
	interval = 1800;	// 30 minutes
	}
)

// PL devices list - address list of read/write registers
// definition of every PL device and it's associated tags
// Note: at this stage plbridge supports only a single PL device
//
// name = a freely definable name
// id = PL20 ID, does nothing at this stage
// enabled = true or false to disable (ignore) any tags in slave
// tags = a list of tag definitions to be read at the indicated interval
// tag parameter description: 
// address: the register address of the tag in the PL device
// update_cycle: the id of the cycle for updating and publishing this tag
// topic: mqtt topic under which to publish the value, en empty string will revent pblishing
// retain: retain value for mqtt publish
// format: printf style format for mqtt publication, NOTE: all values are type "float"
// multiplier: raw value (from slave) will be multiplied by this factor
// offset: value to be added after above multiplication
// noreadvalue: value published when modbus read fails
// noreadaction: -1 = do nothing (default), 0 = publish null 1 = noread value
// noreadignore: number of noreads to ignore before taking noreadaction 
pldevices = (
	{
	name = "PL20";
	id = 1;
	enabled = TRUE;
	tags = 
		(
			{
			address = 101;
			update_cycle = 2;
			topic = "vk2ray/pwr/pl20/rstate";
			format = "%.0f"
			},
			{
			address = 50;
			update_cycle = 2;		// as per "updatecycles" configuration
			topic = "vk2ray/pwr/pl20/batv";
			format = "%.1f"
			multiplier = 0.1;
			offset = 0.0;
			noreadvalue = 0.0;
			},
			{
			address = 52;
			update_cycle = 6;
			topic = "vk2ray/pwr/pl20/battemp"
			format = "%.0f";
			},
//			{
//			address = 185;
//			update_cycle = 1;
//			topic = "vk2ray/pwr/pl20/ciacc1"
//			format = "%.0f";
//			},
//			{
//			address = 186;
//			update_cycle = 1;
//			topic = "vk2ray/pwr/pl20/ciacc2"
//			format = "%.0f";
//			},
//			{
//			address = 187;
//			update_cycle = 1;
//			topic = "vk2ray/pwr/pl20/ciacc3"
//			format = "%.0f";
//			},
//			{
//			address = 188;
//			update_cycle = 1;
//			topic = "vk2ray/pwr/pl20/ciahl"
//			format = "%.0f";
//			},
//			{
//			address = 189;
//			update_cycle = 1;
//			topic = "vk2ray/pwr/pl20/ciahh"
//			format = "%.0f";
//			},
			{
			address = 213;
			update_cycle = 1;
			topic = "vk2ray/pwr/pl20/cint";
			multiplier = 0.1;
			format = "%.1f"
			},
			{
			address = 48572;		// 189 * 256 + 188
			update_cycle = 1;
			topic = "vk2ray/pwr/pl20/ciah";
			format = "%.0f";	
			},
			{
			address = 56796;		// 221 * 256 + 220
			update_cycle = 2;
			topic = "vk2ray/pwr/pl20/vbat";
			format = "%.0f";
			},
			{
			address = 61421;		// 239 * 256 + 237
			update_cycle = 2;
			topic = "vk2ray/pwr/pl20/vsen";
			format = "%.0f";
			},
			{
			address = 39;
			update_cycle = 1;
			topic = "vk2ray/pwr/pl20/dutycyc";
			format = "%.1f"
			multiplier = 0.416666;
//			},
//			{
//			address = 39;
//			update_cycle = 1;
//			topic = "vk2ray/pwr/pl20/dutycyc/raw";
//			format = "%.0f";
			}
		)
	}
)

// read and publish pi cpu temperature
// delete if not desired
cputemp = {
	topic = "binder/home/mqttpi/cpu/temp";
	readinterval = 5;
	publishinterval = 5;
};
